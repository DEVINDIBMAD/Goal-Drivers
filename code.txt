// Write your JS code here
import {Component} from 'react'
import './index.css'
import symbol from './rights_symbol.jpg';


class RegistrationFrom extends Component {
  state = {
    firstNameInput: '',
    lastNameInput: '',
    passwordInput: '',
    confirmPasswordInput: '',
    showFirstNameError: false,
    showLastNameError: false,
    showPasswordError: false,
    showConfirmPasswordError: false,
    isFormSubmitted: false,
  }
  
  onChangePassword = event => {
    const {target} = event
    const {value} = target
  
    this.setState({
      passwordInput: value,
    })
  }
  
  onBlurPassword = () => {
    const isValidPassword = this.validatePassword()
  
    this.setState({showPasswordError: !isValidPassword})
  }
  
  onChangeConfirmPassword = event => {
    const {target} = event
    const {value} = target
  
    this.setState({
      confirmPasswordInput: value,
    })
  }
  
  onBlurConfirmPassword = () => {
    const isValidConfirmPassword = this.validateConfirmPassword()
  
    this.setState({showConfirmPasswordError: !isValidConfirmPassword})
  }
  
  renderRegistrationForm = () => {
    const {showFirstNameError, showLastNameError, showPasswordError, showConfirmPasswordError} = this.state
  
    return (
      <form className="form-container" onSubmit={this.onSubmitForm}>
        {this.renderFirstNameField()}
        {showFirstNameError && <p className="error-message">Required</p>}
        {this.renderLastNameField()}
        {showLastNameError && <p className="error-message">Required</p>}
        <div className="input-container">
          <label className="input-label" htmlFor="password">
            PASSWORD
          </label>
          <input
            type="password"
            id="password"
            className={showPasswordError ? 'name-input-field error-field' : 'name-input-field'}
            placeholder="Password"
            value={this.state.passwordInput}
            onChange={this.onChangePassword}
            onBlur={this.onBlurPassword}
          />
          {showPasswordError && <p className="error-message">Password is required</p>}
        </div>
        <div className="input-container">
          <label className="input-label" htmlFor="confirmPassword">
            CONFIRM PASSWORD
          </label>
          <input
            type="password"
            id="confirmPassword"
            className={showConfirmPasswordError ? 'name-input-field error-field' : 'name-input-field'}
            placeholder="Confirm Password"
            value={this.state.confirmPasswordInput}
            onChange={this.onChangeConfirmPassword}
            onBlur={this.onBlurConfirmPassword}
          />
          {showConfirmPasswordError && <p className="error-message">Passwords do not match</p>}
        </div>
        <button type="submit" className="submit-button">
          Submit
        </button>
      </form>
    )
  }
      
  onBlurLastName = () => {
    const isValidLastName = this.validateLastName()

    this.setState({showLastNameError: !isValidLastName})
  }

  onChangeLastName = event => {
    const {target} = event
    const {value} = target

    this.setState({
      lastNameInput: value,
    })
  }

  renderLastNameField = () => {
    const {lastNameInput, showLastNameError} = this.state
    const className = showLastNameError
      ? 'name-input-field error-field'
      : 'name-input-field'

    return (
      <div className="input-container">
        <label className="input-label" htmlFor="lastName">
          LAST NAME
        </label>
        <input
          type="text"
          id="lastName"
          className={className}
          value={lastNameInput}
          placeholder="Last name"
          onChange={this.onChangeLastName}
          onBlur={this.onBlurLastName}
        />
      </div>
    )
  }

  onBlurFirstName = () => {
    const isValidFirstName = this.validateFirstName()

    this.setState({showFirstNameError: !isValidFirstName})
  }

  onChangeFirstName = event => {
    const {target} = event
    const {value} = target

    this.setState({
      firstNameInput: value,
    })
  }

  renderFirstNameField = () => {
    const {firstNameInput, showFirstNameError} = this.state
    const className = showFirstNameError
      ? 'name-input-field error-field'
      : 'name-input-field'

    return (
      <div className="input-container">
        <label className="input-label" htmlFor="firstName">
          FIRST NAME
        </label>
        <input
          type="text"
          id="firstName"
          className={className}
          value={firstNameInput}
          placeholder="First name"
          onChange={this.onChangeFirstName}
          onBlur={this.onBlurFirstName}
        />
      </div>
    )
  }
  validatePassword = () => {
    const {passwordInput} = this.state
    return passwordInput !== ''
  }
  
  validateConfirmPassword = () => {
    const {passwordInput, confirmPasswordInput} = this.state
    return passwordInput === confirmPasswordInput && confirmPasswordInput !== ''
  }
  
  validateLastName = () => {
    const {lastNameInput} = this.state

    return lastNameInput !== ''
  }

  validateFirstName = () => {
    const {firstNameInput} = this.state

    return firstNameInput !== ''
  }

  onSubmitForm = event => {
    event.preventDefault()
    const isValidFirstName = this.validateFirstName()
    const isValidLastName = this.validateLastName()
    const isValidPassword = this.validatePassword()
    const isValidConfirmPassword = this.validateConfirmPassword()

    if (isValidFirstName && isValidLastName && isValidPassword && isValidConfirmPassword) {
      this.setState({isFormSubmitted: true})
    } else {
      this.setState({
        showFirstNameError: !isValidFirstName,
        showLastNameError: !isValidLastName,
        showPasswordError:!isValidPassword,
        showConfirmPasswordError: !isValidConfirmPassword,
        isFormSubmitted: false,
      })
    }
  }



  onClickSubmitAnotherResponse = () => {
    this.setState(prevState => ({
      isFormSubmitted: !prevState.isFormSubmitted,
      firstNameInput: '',
      lastNameInput: '',
    }))
  }

  renderSubmissionSuccessView = () => (
    <>
    
     <img src={symbol} alt="form" width="100px"/>
      <p>Submitted Successfully</p>

      
      <button
        type="button"
        className="submit-button"
        onClick={this.onClickSubmitAnotherResponse}
      >
        Submit Another Response
      </button>
    </>
  )


  render() {
    const {isFormSubmitted} = this.state

    return (
      <div className="registration-form-container">
        <h1 className="form-title">REGISTRATION</h1>
        <div className="view-container">
          {isFormSubmitted
            ? this.renderSubmissionSuccessView()
            : this.renderRegistrationForm()}
        </div>
      </div>
    )
  }
}

export default RegistrationFrom





/* Write your CSS code here */
.registration-form-container {
  display: flex; /* This sets the display property of the container to flex, which enables flexible layout options for the container's children elements.*/
  flex-direction: column; /*  This sets the direction of the flex layout to vertical, so that the children elements are stacked vertically inside the container.*/
  justify-content: center; /*  This centers the children elements vertically within the container.*/
  align-items: center; /*  This centers the children elements horizontally within the container.*/
  height: 100vh; /*  This sets the height of the container to 100% of the viewport height, which means it will take up the full height of the screen.*/
  margin-left: auto; /* This adds a margin to the left side of the container, pushing it towards the center of the screen.*/
  max-width: 50%; /*  This sets the maximum width of the container to 50% of the viewport width, which means it won't expand to fill the entire screen.*/
}


@media screen and (max-width: 767px) {
  .registration-form-container {
    flex-direction: column; /* This sets the direction of the flex layout to vertical, so that the children elements are stacked vertically inside the container. */
    justify-content: start; /* This aligns the children elements to the top of the container. */
    padding-top: 50px; /* This adds 50 pixels of padding to the top of the container. */
  }
}


.form-title {
  font-size: 48px; /* This sets the font size of the text to 48 pixels. */
  color: #00b4fb; /* This sets the color of the text to a shade of blue. */
  font-weight: 500; /* This sets the font weight of the text to 500, which is a medium thickness. */
}

@media screen and (max-width: 767px) {
  .form-title {
    font-size: 36px;
  }
}

.view-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  max-width: 350px;
  padding: 20px;
  border-radius: 16px;
  min-height: 310px;
}

@media screen and (min-width: 768px) {
  .view-container {
    max-width: 450px;
    flex-shrink: 0;
    box-shadow: 0px 4px 16px rgba(126, 133, 142, 0.16);
    padding: 48px 64px 48px 64px;
  }
}

.form-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
}

.input-container {
  display: flex;
  flex-direction: column;
  margin-top: 20px;
  width: 100%;
}

.form-image {
  width: 4cm;
  height: 4cm;
}

.input-label {
  margin-bottom: 0px;
  font-family: 'Roboto';
  font-weight: bold;
  font-size: 12px;
  line-height: 16px;
  color: #475569;
}

.name-input-field {
  font-size: 16px;
  line-height: 16px;
  font-weight: 500;
  border: 1px solid #cbd2d9;
  color: #9aa5b1;
  border-radius: 4px;
  margin-top: 5px;
  padding: 8px 16px 8px 16px;
  outline: none;
}

.success-image {
  width: 72px;
}

.submit-button {
  font-family: 'Roboto';
  font-size: 12px;
  color: #ffffff;
  padding: 8px 16px;
  margin-top: 20px;
  margin-bottom: 2px;
  background-color: #12c2fc;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  outline: none;
}

@media screen and (max-width: 768px) {
  .submit-button {
    width: 100%;
  }
}

.error-field {
  border: 1px solid #ff0b37;
  background-color: #fef2f4;
}

.error-message {
  align-self: start;
  font-size: 12px;
  margin-top: 3px;
  margin-bottom: 0px;
  font-family: 'Roboto';
  font-size: 12px;
  line-height: 16px;
  color: #ff0b37;
}




/* Write your CSS code here */
.registration-form-container {
  display: flex; /* This sets the display property of the container to flex, which enables flexible layout options for the container's children elements.*/
  flex-direction: column; /*  This sets the direction of the flex layout to vertical, so that the children elements are stacked vertically inside the container.*/
  justify-content: center; /*  This centers the children elements vertically within the container.*/
  align-items: center; /*  This centers the children elements horizontally within the container.*/
  height: 100vh; /*  This sets the height of the container to 100% of the viewport height, which means it will take up the full height of the screen.*/
  margin-left: auto; /* This adds a margin to the left side of the container, pushing it towards the center of the screen.*/
  max-width: 50%; /*  This sets the maximum width of the container to 50% of the viewport width, which means it won't expand to fill the entire screen.*/
}


@media screen and (max-width: 767px) {
  .registration-form-container {
    flex-direction: column; /* This sets the direction of the flex layout to vertical, so that the children elements are stacked vertically inside the container. */
    justify-content: start; /* This aligns the children elements to the top of the container. */
    padding-top: 50px; /* This adds 50 pixels of padding to the top of the container. */
  }
}


.form-title {
  font-size: 48px; /* This sets the font size of the text to 48 pixels. */
  color: #00b4fb; /* This sets the color of the text to a shade of blue. */
  font-weight: 500; /* This sets the font weight of the text to 500, which is a medium thickness. */
}

@media screen and (max-width: 767px) {
  .form-title {
    font-size: 36px;
  }
}

.view-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  max-width: 350px;
  padding: 20px;
  border-radius: 16px;
  min-height: 310px;
}

@media screen and (min-width: 768px) {
  .view-container {
    max-width: 450px;
    flex-shrink: 0;
    box-shadow: 0px 4px 16px rgba(126, 133, 142, 0.16);
    padding: 48px 64px 48px 64px;
  }
}

.form-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
}

.input-container {
  display: flex;
  flex-direction: column;
  margin-top: 20px;
  width: 100%;
}

.form-image {
  width: 4cm;
  height: 4cm;
}

.input-label {
  margin-bottom: 0px;
  font-family: 'Roboto';
  font-weight: bold;
  font-size: 12px;
  line-height: 16px;
  color: #475569;
}

.name-input-field {
  font-size: 16px;
  line-height: 16px;
  font-weight: 500;
  border: 1px solid #cbd2d9;
  color: #9aa5b1;
  border-radius: 4px;
  margin-top: 5px;
  padding: 8px 16px 8px 16px;
  outline: none;
}

.success-image {
  width: 72px;
}

.submit-button {
  font-family: 'Roboto';
  font-size: 12px;
  color: #ffffff;
  padding: 8px 16px;
  margin-top: 20px;
  margin-bottom: 2px;
  background-color: #12c2fc;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  outline: none;
}

@media screen and (max-width: 768px) {
  .submit-button {
    width: 100%;
  }
}

.error-field {
  border: 1px solid #ff0b37;
  background-color: #fef2f4;
}

.error-message {
  align-self: start;
  font-size: 12px;
  margin-top: 3px;
  margin-bottom: 0px;
  font-family: 'Roboto';
  font-size: 12px;
  line-height: 16px;
  color: #ff0b37;
}

.image{
  width: 300cm;

}


import React, { Component } from 'react';
import './index.css';

class LoginForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      email: '',
      password: '',
      isFormSubmitted: false,
      emailError: '',
      passwordError: ''
    };
  }

  handleInputChange = (event) => {
    const { name, value } = event.target;
    this.setState({ [name]: value });
  }

  handleBlur = (event) => {
    const { name, value } = event.target;
    this.validateField(name, value);
  }

  validateField(fieldName, value) {
    let emailError = '';
    let passwordError = '';

    switch(fieldName) {
      case 'email':
        if (!value.includes('@')) {
          emailError = 'Invalid email';
        }
        break;
      case 'password':
        if (value.length < 5) {
          passwordError = 'Password must be at least 5 characters long';
        }
        break;
      default:
        break;
    }

    this.setState({ emailError, passwordError });
  }

  handleSubmit = (event) => {
    event.preventDefault();
    const { email, password } = this.state;
    if (email === 'abc@gmail.com' && password === '12345') {
      this.setState({ isFormSubmitted: true });
      alert('You successfully logged in to the system.');
    }
  }

  renderEmailField() {
    return (
      <div className="input-container">
        <label className="input-label" htmlFor="email">Email:</label>
        <input
          className={`name-input-field ${this.state.emailError ? 'error-field' : ''}`}
          type="text"
          name="email"
          value={this.state.email}
          onChange={this.handleInputChange}
          onBlur={this.handleBlur}
        />
        <div className="error-message">{this.state.emailError}</div>
      </div>
    );
  }

  renderPasswordField() {
    return (
      <div className="input-container">
        <label className="input-label" htmlFor="password">Password:</label>
        <input
          className={`name-input-field ${this.state.passwordError ? 'error-field' : ''}`}
          type="password"
          name="password"
          value={this.state.password}
          onChange={this.handleInputChange}
          onBlur={this.handleBlur}
        />
        <div className="error-message">{this.state.passwordError}</div>
      </div>
    );
  }

  renderLoginForm() {
    return (
      <form onSubmit={this.handleSubmit}>
        {this.renderEmailField()}
        {this.renderPasswordField()}
        <button
          className="submit-button"
          type="submit"
          disabled={this.state.emailError || this.state.passwordError}
        >
          Submit
        </button>
      </form>
    );
  }

  render() {
    return (
      <div className="login-form-container">
        <div className="view-container">
          {this.state.isFormSubmitted ? (
            <div>You have successfully logged in to the system.</div>
          ) : (
            this.renderLoginForm()
          )}
        </div>
      </div>
    );
  }
}

export default LoginForm;
